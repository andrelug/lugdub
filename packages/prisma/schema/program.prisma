enum ProgramType {
  affiliate
  referral
}

enum CommissionType {
  percentage
  flat
}

enum ProgramEnrollmentStatus {
  invited // partner who already has an account
  approved // partner who doesn't have an account
  rejected // program rejected the partner
  declined // partner declined the invite
  pending // pending applications that need approval
}

enum CommissionInterval {
  month
  year
}

model Program {
  id                String      @id @default(cuid())
  workspaceId       String
  defaultFolderId   String?
  name              String
  slug              String      @unique
  logo              String?
  wordmark          String?
  brandColor        String?
  domain            String?
  url               String?
  type              ProgramType @default(affiliate)
  cookieLength      Int         @default(90)
  holdingPeriodDays Int         @default(0) // number of days to wait before earnings are added to a payout
  minPayoutAmount   Int         @default(10000) // Default minimum payout amount of $100
  defaultRewardId   String?     @unique // default reward for the program
  defaultDiscountId String?     @unique // default discount for the program
  landerData        Json?       @db.Json
  resources         Json?       @db.Json
  termsUrl          String?     @db.Text
  ageVerification   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspace       Project              @relation(fields: [workspaceId], references: [id])
  primaryDomain   Domain?              @relation(fields: [domain], references: [slug], onUpdate: Cascade)
  partners        ProgramEnrollment[]
  payouts         Payout[]
  invoices        Invoice[]
  applications    ProgramApplication[]
  links           Link[]
  commissions     Commission[]
  rewards         Reward[]
  defaultReward   Reward?              @relation("ProgramDefaultReward", fields: [defaultRewardId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  discounts       Discount[]           @relation("ProgramDiscounts")
  defaultDiscount Discount?            @relation("ProgramDefaultDiscount", fields: [defaultDiscountId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@index([workspaceId])
  @@index([domain])
}

model ProgramEnrollment {
  id               String                  @id @default(cuid())
  partnerId        String
  programId        String
  tenantId         String?
  commissionAmount Int? // custom commission amount for this partner // TODO: Remove after the migration
  discountId       String? // custom discount for this partner
  applicationId    String?                 @unique
  status           ProgramEnrollmentStatus @default(pending)
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt

  partner     Partner             @relation(fields: [partnerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  program     Program             @relation(fields: [programId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  links       Link[]
  discount    Discount?           @relation(fields: [discountId], references: [id])
  application ProgramApplication? @relation(fields: [applicationId], references: [id])
  rewards     PartnerReward[]

  @@unique([partnerId, programId])
  @@unique([tenantId, programId])
  @@index([programId])
  @@index([discountId])
}

model ProgramApplication {
  id        String   @id @default(cuid())
  programId String
  partnerId String?
  name      String
  email     String
  proposal  String?  @db.Text
  website   String?  @db.Text
  comments  String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  partner    Partner?           @relation(fields: [partnerId], references: [id])
  program    Program            @relation(fields: [programId], references: [id])
  enrollment ProgramEnrollment?

  @@index([programId])
  @@index([partnerId])
}
